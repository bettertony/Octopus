#! /usr/bin/python

import argparse
import os
import re
import subprocess
import sys


PIPELINE_DEBUG_BIN = 'octopus-debug'
ADDR2LINE = ['addr2line', '-e']
BT_RE = re.compile(r'^octopus: .+\[(0x[0-9a-f]+)\]$')


def is_executable(path):
  return os.path.isfile(path) and os.access(path, os.X_OK)


def find_binary_path(name):
    for path in os.environ['PATH'].split(os.pathsep):
      path = os.path.join(path.strip('"'), name)
      if is_executable(path):
        return path


def main(args):
  if not args.binary:
    path = find_binary_path(PIPELINE_DEBUG_BIN)
    if not path:
      sys.stderr.write('Could not find %s on your PATH\n' % PIPELINE_DEBUG_BIN)
      sys.exit(1)
    args.binary = path

  for line in sys.stdin:
    if not line.startswith('octopus:'):
      sys.stdout.write(line)
      continue

    match = BT_RE.match(line.strip())
    if not match or not match.groups():
      sys.stdout.write(line)
      continue

    try:
      cmd = ADDR2LINE + [args.binary, match.groups()[0]]
      p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
      out, err = p.communicate()
      if out and not err:
        line = '%s {%s}\n' % (line.strip(), out.strip())
    except:
      pass

    sys.stdout.write(line)


if __name__ == '__main__':
  """
  Parses all backtraced dumped by Octopus and tries to associate then with
  line numbers.

  Usage:

    cat octopus.log | parse_backtraces --binary /usr/bin/octopus-debug
  """
  parser = argparse.ArgumentParser()
  parser.add_argument('--binary', action='store', dest='binary',
                      required=False, help='Octopus debug binary to use')
  args = parser.parse_args()
  main(args)
